#!/bin/bash
# /// @author	Marc Hanheide (mhanheid@TechFak.Uni-Bielefeld.de)
# /// @date	started at 2005/03/04
# /// @version	$Id: vdemo2,v 1.3 2007/08/17 15:28:46 mhanheid Exp $
RCS_ID='$Id: vdemo2,v 1.3 2007/08/17 15:28:46 mhanheid Exp $'
SCRIPTNAME=${0##*/}

USAGE="\
usage: $SCRIPTNAME [options] <Config file>
  for further help invoke '$SCRIPTNAME -h'
"

HELP="\
usage: $SCRIPTNAME [options] <Config file>

vdemo starter

 options:
  -h  --help                 display this help
  -a  --auto                 automatically start all components
  -l  --log                  enable logging for all components
  -d  --detach time          set default detach time in seconds
                              0: start detached
                             <0: never detach
  -r  --logrotate            enable log rotation
  -v  --verbose [level]      set verbosity [level]
                             >0: increasing verbosity
                             -1: also suppress message boxes
  -s  --server <port>        webserver for remote control (localhost:<port>/vdemo/api/help)
  -g  --geometry <geometry>  sets the main vdemo windows geometry to the specified
                             size. Uses default value (\"$GEOMETRY\") otherwise.
  -Q  --quit <components>    space separated list of components to quit vdemo on

 authors: Marc Hanheide, Robert Haschke, Lars Schillingmann, Florian Lier
"

# exit script on all non-zero return values
set -e

VDEMO_DO_REDIRECT=""
# option checks
while [ $# -gt 0 ]; do
    case $1 in
    "-h"|"--help")
        echo "$HELP" >& 2
        exit 0
        ;;
    "-a"|"--auto")
        echo "Automatically starting all components"
        export VDEMO_autostart="true"
        ;;
    "-l"|"--log")
        export VDEMO_LOGGING=1
        ;;
    "-d"|"--detach")
        if [[ $2 =~ ^-?[0-9]+$ ]] ; then
            export VDEMO_DETACH_TIME=$2
            shift
        else
            echo "invalid detach time: $2"
        fi
        ;;
    "-r"|"--logrotate")
        echo "Enabling log rotation"
        export VDEMO_LOG_ROTATION=5
        if [[ $2 =~ ^[0-9]+$ ]] ; then
            VDEMO_LOG_ROTATION=$2
            shift
        fi
        ;;
    "-v"|"--verbose")
        export VDEMO_DEBUG_LEVEL=1
        if [[ $2 =~ ^-?[0-9]+$ ]] ; then
            export VDEMO_DEBUG_LEVEL=$2
            shift
        fi
        echo "Using verbosity level $VDEMO_DEBUG_LEVEL"
        ;;
    "-w"|"--watch")
        VDEMO_DO_REDIRECT=1
        ;;
    "-s"|"--server")
        export VDEMO_SERVER_PORT=$2
        shift
        ;;
    "-g"|"--geometry")
        export GEOMETRY=$2
        shift
        ;;
    "-Q"|"--quit")
        export VDEMO_QUIT_COMPONENTS=$2
        shift
        ;;
    -*)
        echo "illegal option $1" >& 2
        echo "$USAGE" >& 2
        exit 1
        ;;
    *)
        break
        ;;
    esac
    shift
done

# obligatory arguments check
if [ $# -lt 1 ]; then
    echo "obligatory argument(s) missing. $USAGE" >&2
    exit 1
fi

export VDEMO_root="@VDEMO_root@"

export VDEMO_demoConfig="$1"
if [[ "$1" != /* ]]; then VDEMO_demoConfig=$(pwd)/$1; fi

source "$VDEMO_demoConfig"

export VDEMO_exports="SPREAD_CONFIG $VDEMO_exports"

if [ ! -z "$VDEMO_DO_REDIRECT" ] && [ ! -z "$VDEMO_watchfile" ]; then
    exec &> >(tee -i "$VDEMO_watchfile")
fi

if [ -z "$VDEMO_SERVER_PORT" ]; then
    exec wish $VDEMO_root/vdemo2_controller.tcl
else
    exec python3 $VDEMO_root/vdemo_controller.py $VDEMO_root/vdemo2_controller.tcl
fi
